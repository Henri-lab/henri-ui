export function easeInOutCubic(t: number, b: number, c: number, d: number) {
  const cc = c - b
  t /= d / 2
  if (t < 1) {
    return (cc / 2) * t * t * t + b
  }
  return (cc / 2) * ((t -= 2) * t * t + 2) + b
}
// ### 函数解析：`easeInOutCubic`

// 此函数是典型的缓动（easing）函数之一，用于创建平滑的动画效果。缓动函数通常在动画中使用，以模仿物理现象中的加速度和减速度，从而使得动画看起来更加自然。

// #### 参数说明

// - `t`: 当前时间或动画的进度，单位通常是毫秒。
// - `b`: 开始值，即动画开始时的初始值。
// - `c`: 变化量，即从开始值到结束值的差值。
// - `d`: 总时长，动画完成所需的时间。

// #### 函数逻辑

// 1. **初始化变量**：首先，将`c - b`的结果赋给`cc`，这实际上就是变化量，但这里是为了后续计算方便而做的预处理。

// 2. **归一化时间**：将`t`除以`d / 2`，这样可以将时间范围缩放到0到2之间，便于后续的条件判断和计算。

// 3. **条件分支**：
//    - **加速阶段**：当`t`小于1时（即动画处于前半段），函数返回一个加速的计算结果。这里使用了三次方的公式来模拟加速效果，即`(cc / 2) * t * t * t + b`。
//    - **减速阶段**：当`t`大于等于1时（即动画处于后半段），函数通过调整`t`的值（`t -= 2`）并使用同样的三次方公式来模拟减速效果，即`(cc / 2) * ((t -= 2) * t * t + 2) + b`。

// 4. **返回值**：根据上述条件分支，函数返回相应的计算结果，这个结果表示在当前时间点动画应该显示的值。

// #### 总结

// `easeInOutCubic`函数通过数学公式模拟了先加速后减速的效果，适用于需要平滑过渡的动画场景，如元素的移动、缩放等。这种缓动效果能够提升用户体验，使动画看起来更加流畅和自然。
